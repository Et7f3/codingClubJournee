#include <iostream>
#include <vector>
#include <thread>
#include <string>


#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h> /* close */
#include <netdb.h> /* gethostbyname */

#define INVALID_SOCKET -1
#define SOCKET_ERROR -1
#define PORT 5000

using namespace std;
vector<int> clients(0);
int sock=INVALID_SOCKET;
int server();
//clear&&g++ -pthread serveur.cpp -o serveur&&valgrind --leak-check=full ./serveur
int main(){
  try{
    thread s(server);
    string command;
  
    while(1){
      cin>>command;
      if(command=="quit"){
	for(int i=0;i<clients.size();){
	  cout<<"bye :"<<clients.back()<<endl;
	  close(clients.back());
	  clients.pop_back();
	}
	close(sock);
	s.detach();
	s.~thread();
	break;
      }
      if(command=="send"){
	string data,message;
	while(data!="\x1B"){
	  cin>>data;
	  message+=data;
	}
	for(int i=0;i<clients.size();i++){
	  if(send(clients.at(i), message.c_str(), message.size(), 0) < 0)
	    {
	      perror("send()");
	      exit(errno);
	    }
	}
      }
      
    }
    //s.join();
  }catch(const std::exception& e){
    cerr<<e.what();
  }
  return 0;
}
int server(){

  sock = socket(AF_INET, SOCK_STREAM, 0);
  if(sock == INVALID_SOCKET)
    {
      perror("socket()");
      exit(errno);
    }

  sockaddr_in sin = { 0 };

  sin.sin_addr.s_addr = htonl(INADDR_ANY); /* nous sommes un serveur, nous acceptons n'importe quelle adresse */

  sin.sin_family = AF_INET;

  sin.sin_port = htons(PORT);

  if(bind (sock, (sockaddr *) &sin, sizeof sin) == SOCKET_ERROR)
    {
      perror("bind()");
      exit(errno);
    }

  while(1){
    if(listen(sock, 5) == SOCKET_ERROR)
      {
	perror("listen()");
	exit(errno);
      }

    sockaddr_in csin = { 0 };
    int csock;

    socklen_t sinsize = sizeof csin;

    csock = accept(sock, (sockaddr *)&csin, &sinsize);
   
    if(csock == INVALID_SOCKET)
      {
	perror("accept()");
	exit(errno);
      }
    cout<<"nouveau client id:"<<csock<<endl;
    clients.push_back(csock);


  
  }
  
  
  return 0;
}
